
target_default: 5_predictions

include:
  - 4_inputs.yml

packages:
  - yaml
  - whisker
  - dplyr
  - tidyr
  - meddle
  - readr
  - rgdal
  - stringr
  - glmtools
  - sf
  - zip

sources:
  - src/file_utils.R
  - src/spatial_utils.R
  - src/plot_utils.R
  - src/do_sorting_tasks.R

targets:
  5_predictions:
    depends:
      - out_data/predict_lakes.png
      - out/5_preds_hashes.yml

  out/5_preds_hashes.yml:
    command: combine_hash_files(target_name,
      'out/5_predictions_zips.yml',
      'out/5_irradiance_zips.yml')

  pb_predictions_df:
    command: export_pb_df(site_ids = modeled_lake_ids,
      exp_prefix = I('pb0'), exp_suffix = I('temperatures'),
      model_out_ind = '../lake-temperature-process-models/3_run/out/toha_tasks.rds.ind')

  irradiance_df:
    command: export_pb_df(site_ids = modeled_lake_ids,
      exp_prefix = I('pb0'), exp_suffix = I('irradiance'),
      model_out_ind = '../lake-temperature-process-models/3_run/out/toha_tasks.rds.ind')

  out/5_predictions_zips.yml:
    command: zip_pb_export_groups(target_name,
      file_info_df = pb_predictions_df,
      site_groups = site_ids_grouped,
      export_start = export_start,
      export_stop = export_stop,
      export = I('pb0_predictions'))

  out/5_irradiance_zips.yml:
    command: zip_pb_export_groups(target_name,
      file_info_df = irradiance_df,
      site_groups = site_ids_grouped,
      export_start = export_start,
      export_stop = export_stop,
      export = I('irradiance'))

  tmp/pgdl_site_groups.csv:
    command: write_csv(pgdl_site_ids_grouped, target_name)

  pgdl_model_dir:
    command: c(I('../lake-temperature-neural-networks/2_model/out'))

  pgdl_pretrain_predictions_df:
    command: build_pgdl_df(
      pgdl_preds_ind = '../lake-temperature-neural-networks/3_assess/log/preds_pretrain.ind',
      prefix = I('pgdl'), suffix = I('pretrain_temperatures'))

  tmp/5_pgdl_pretrain_predictions_zips.yml:
    command: zip_pgdl_prediction_groups(target_name, pgdl_pretrain_predictions_df,
      site_groups = pgdl_site_ids_grouped, phase = I('pretrain'))

  pgdl_predictions_df:
    command: build_pgdl_df(
      pgdl_preds_ind = '../lake-temperature-neural-networks/3_assess/log/preds_final.ind',
      prefix = I('pgdl'), suffix = I('temperatures'))
   
  out/pgdl_predictions_final_sorted.ind:
      command: do_sorting_tasks(
          final_target = target_name,
          site_id_list = pgdl_lake_ids,
          prediction_files = I('pgdl_predictions_df'),
          prediction_type = I('pgdl_final'),
          'src/do_sorting_tasks.R',
          'src/file_utils.R')
      depends: pgdl_predictions_df

  out/5_pgdl_predictions_zips.yml:
    command: zip_pgdl_prediction_groups(target_name, pgdl_predictions_df,
      site_groups = pgdl_site_ids_grouped, phase = I('finetune'))
    depends: out/pgdl_predictions_final_sorted.ind

  pgdl_test_predictions_df:
    command: build_pgdl_df(
      pgdl_preds_ind = '../lake-temperature-neural-networks/3_assess/log/preds_holdout.ind',
      prefix = I('pgdl'), suffix = I('test_temperatures'))

  pgdl_test_site_ids:
      command: get_site_ids(pgdl_test_predictions_df)

  out/pgdl_predictions_test_sorted.ind:
      command: do_sorting_tasks(
          final_target = target_name,
          site_id_list = pgdl_test_site_ids,
          prediction_files = I('pgdl_test_predictions_df'),
          prediction_type = I('pgdl_test'),
          'src/do_sorting_tasks.R',
          'src/file_utils.R')
      depends: pgdl_test_predictions_df

  out/5_pgdl_test_predictions_zips.yml:
    command: zip_pgdl_test_groups(target_name, pgdl_test_predictions_df,
      site_groups = pgdl_site_ids_grouped)
    depends: out/pgdl_predictions_test_sorted.ind

  out_data/predict_lakes.png:
    command: plot_grouped_lakes_preview(target_name,
      spatial_groups, site_ids_grouped,
      county_bounds = us_counties_sf,
      lakes_sf_fl = "../lake-temperature-model-prep/1_crosswalk_fetch/out/canonical_lakes_sf.rds")
